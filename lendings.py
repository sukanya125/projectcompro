import struct, os, time, datetime
from books import BOOKS_FILE, BOOK_FORMAT, BOOK_RECORD_SIZE, STATUS_ACTIVE, unpack_string, pack_string
from members import MEMBERS_FILE, MEMBER_FORMAT, MEMBER_RECORD_SIZE

# ============================================
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô
# ============================================
LENDINGS_FILE = 'lendings.dat'  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå binary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô
LENDING_FORMAT = '< c i i i d d'  # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞(1 byte), lending_id(4), book_id(4), member_id(4), ‡∏ß‡∏±‡∏ô‡∏¢‡∏∑‡∏°(8), ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô(8)
LENDING_RECORD_SIZE = struct.calcsize(LENDING_FORMAT)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ record (29 bytes)
STATUS_BORROWED = b'A'  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'A' = Active (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà)
STATUS_RETURNED = b'R'  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'R' = Returned (‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß)

# ============================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏´‡∏≤ ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
# ============================================
def get_last_id(filename, record_size):
    """
    ‡∏≠‡πà‡∏≤‡∏ô record ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà (ID_‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + 1)
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if not os.path.exists(filename) or os.path.getsize(filename) == 0:
        return 0  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ 0
    
    with open(filename, 'rb') as f:
        f.seek(-record_size, os.SEEK_END)  # ‡πÑ‡∏õ‡∏ó‡∏µ‡πà record ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)
        record = f.read(record_size)  # ‡∏≠‡πà‡∏≤‡∏ô record ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        return struct.unpack('<i', record[1:5])[0]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ ID ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á byte 1-5

# ============================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
# ============================================
def borrow_book():
    book_id = int(input("Book ID ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏∑‡∏°: "))
    member_id = int(input("Member ID: "))
    book_found = False
    with open(BOOKS_FILE, 'rb') as bf:
        while True:
            r = bf.read(BOOK_RECORD_SIZE)  # ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ record
            if not r:  # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏ô‡∏´‡∏°‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß
                break
            status, bid, _, title, _, qty = struct.unpack(BOOK_FORMAT, r)
            if status == STATUS_ACTIVE and bid == book_id:
                book_found = True
                book_title = unpack_string(title)  # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string
                book_qty = qty  # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                break
    if not book_found:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
        return  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    member_found = False
    with open(MEMBERS_FILE, 'rb') as mf:
        while True:
            r = mf.read(MEMBER_RECORD_SIZE)  # ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ record
            if not r:
                break
            status, mid, name, _ = struct.unpack(MEMBER_FORMAT, r)
            if status == STATUS_ACTIVE and mid == member_id:
                member_found = True
                member_name = unpack_string(name)  # ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô string
                break
    if not member_found:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        return
    if book_qty <= 0:
        print("‚ùå ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å")
        return
    lending_id = get_last_id(LENDINGS_FILE, LENDING_RECORD_SIZE) + 1  # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà
    borrow_date = time.time()  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô timestamp
    return_date = 0.0  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô ‡πÉ‡∏™‡πà 0
    record = struct.pack(LENDING_FORMAT, STATUS_BORROWED, lending_id, book_id, member_id, borrow_date, return_date)
    with open(LENDINGS_FILE, 'ab') as f:
        f.write(record)
    with open(BOOKS_FILE, 'r+b') as bf:  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö read+write
        while True:
            pos = bf.tell()  # ‡∏à‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            r = bf.read(BOOK_RECORD_SIZE)
            if not r:
                break
            status, bid, isbn, title, author, qty = struct.unpack(BOOK_FORMAT, r)
            if status == STATUS_ACTIVE and bid == book_id:
                qty -= 1  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1
                new_record = struct.pack(BOOK_FORMAT, status, bid, isbn, title, author, qty)
                bf.seek(pos)  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
                bf.write(new_record)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
                break
    print(f"‚úÖ ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ '{book_title}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÇ‡∏î‡∏¢ {member_name}")

# ============================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
# ============================================
def return_book():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Lending ID -> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö -> ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ -> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    """
    lending_id = int(input("Lending ID ‡∏Ñ‡∏∑‡∏ô: "))
    found = False
    with open(LENDINGS_FILE, 'r+b') as f:
        while True:
            pos = f.tell()  # ‡∏à‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            r = f.read(LENDING_RECORD_SIZE)
            if not r:
                break
            status, lid, bid, mid, borrow_date, return_date = struct.unpack(LENDING_FORMAT, r)
            if status == STATUS_BORROWED and lid == lending_id:
                found = True
                return_time = time.time()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                days = (return_time - borrow_date) / 86400  # ‡πÅ‡∏õ‡∏•‡∏á seconds ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô (86400 = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô seconds ‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô)
                fine = max(0, int(days - 7) * 5)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô)
                new_record = struct.pack(LENDING_FORMAT, STATUS_RETURNED, lid, bid, mid, borrow_date, return_time)
                f.seek(pos)  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
                f.write(new_record)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
                with open(BOOKS_FILE, 'r+b') as bf:
                    while True:
                        pos2 = bf.tell()
                        r2 = bf.read(BOOK_RECORD_SIZE)
                        if not r2:
                            break
                        status_b, bid_b, isbn, title, author, qty = struct.unpack(BOOK_FORMAT, r2)
                        if status_b == STATUS_ACTIVE and bid_b == bid:
                            qty += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1
                            new_record_b = struct.pack(BOOK_FORMAT, status_b, bid_b, isbn, title, author, qty)
                            bf.seek(pos2)  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
                            bf.write(new_record_b)  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
                            break
                print(f"‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö: {fine} ‡∏ö‡∏≤‡∏ó" if fine > 0 else "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö")
                break
    if not found:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Lending ID")

# ============================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
# ============================================
def view_lendings():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not os.path.exists(LENDINGS_FILE):
        print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô")
        return

    print("\n--- üìñ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô ---")
    with open(LENDINGS_FILE, 'rb') as f:
        while True:
            r = f.read(LENDING_RECORD_SIZE)
            if not r:
                break
            # ‡πÅ‡∏ï‡∏Å record
            status, lid, bid, mid, borrow_date, return_date = struct.unpack(LENDING_FORMAT, r)
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà Active (‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
            if status in [STATUS_BORROWED, STATUS_RETURNED]:
                # ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                bdate = datetime.datetime.fromtimestamp(borrow_date).strftime("%Y-%m-%d")
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô (return_date = 0) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô"
                rdate = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô" if return_date == 0.0 else datetime.datetime.fromtimestamp(return_date).strftime("%Y-%m-%d")
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                status_text = "üìï ‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà" if status == STATUS_BORROWED else "‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                print(f"LID:{lid}, BookID:{bid}, MemberID:{mid}, ‡∏¢‡∏∑‡∏°:{bdate}, ‡∏Ñ‡∏∑‡∏ô:{rdate}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{status_text}")

# ============================================
# ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô
# ============================================
def lendings_menu():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    while True:
        print("\n--- üìö ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô ---")
        print("1. ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
        print("2. ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")
        print("3. ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("0. ‡∏Å‡∏•‡∏±‡∏ö")
        ch = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if ch == '1':
            borrow_book()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
        elif ch == '2':
            return_book()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
        elif ch == '3':
            view_lendings()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        elif ch == '0':
            break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å